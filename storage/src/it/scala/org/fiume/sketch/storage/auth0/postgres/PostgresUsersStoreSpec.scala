package org.fiume.sketch.storage.auth.postgres

import cats.effect.IO
import cats.implicits.*
import doobie.ConnectionIO
import doobie.implicits.*
import doobie.postgres.implicits.*
import munit.ScalaCheckEffectSuite
import org.fiume.sketch.shared.auth.{Passwords, UserId}
import org.fiume.sketch.shared.auth.Passwords.HashedPassword
import org.fiume.sketch.shared.auth.User.*
import org.fiume.sketch.shared.auth.accounts.AccountState
import org.fiume.sketch.shared.auth.accounts.AccountState.SoftDeleted
import org.fiume.sketch.shared.auth.accounts.jobs.AccountDeletionEvent
import org.fiume.sketch.shared.auth.testkit.PasswordsGens.given
import org.fiume.sketch.shared.auth.testkit.UserGens
import org.fiume.sketch.shared.auth.testkit.UserGens.given
import org.fiume.sketch.shared.common.jobs.JobId
import org.fiume.sketch.shared.testkit.ClockContext
import org.fiume.sketch.shared.testkit.syntax.OptionSyntax.*
import org.fiume.sketch.storage.auth.postgres.DatabaseCodecs.given
import org.fiume.sketch.storage.testkit.DockerPostgresSuite
import org.scalacheck.ShrinkLowPriority
import org.scalacheck.effect.PropF.forAllF

import java.time.Instant
import java.time.temporal.ChronoUnit.MILLIS
import scala.concurrent.duration.*

class PostgresUsersStoreSpec
    extends ScalaCheckEffectSuite
    with ClockContext
    with PostgresUsersStoreSpecContext
    with ShrinkLowPriority:

  override def scalaCheckTestParameters = super.scalaCheckTestParameters.withMinSuccessfulTests(1)

  test("creates account and fetches it by username"):
    forAllF { (credentials: UserCredentials) =>
      will(cleanStorage) {
        PostgresUsersStore.make[IO](transactor(), makeFrozenClock()).use { store =>
          for
            uuid <- store.createAccount(credentials).ccommit

            result <- store.fetchAccount(credentials.username).ccommit.map(_.someOrFail)
//
          yield
            assertEquals(result.uuid, uuid)
            assertEquals(result.credentials, credentials)
            result.state match
              case AccountState.Active(_) => assert(true)
              case _                      => fail(s"Expected AccountState.Active, got ${result.state}")
        }
      }
    }

  test("updates user password"):
    forAllF { (credentials: UserCredentials, newPassword: HashedPassword) =>
      will(cleanStorage) {
        PostgresUsersStore.make[IO](transactor(), makeFrozenClock()).use { store =>
          for
            uuid <- store.createAccount(credentials).ccommit

            _ <- store.updatePassword(uuid, newPassword).ccommit

            result <- store.fetchPassword(uuid).ccommit
          yield assertEquals(result, newPassword)
        }
      }
    }

  test("marks account for deletion"):
    forAllF { (fstCreds: UserCredentials, sndCreds: UserCredentials) =>
      will(cleanStorage) {
        val deletedAt = Instant.now()
        val frozenClock = makeFrozenClock(deletedAt)
        val permantDeletionDelay = 1.second
        PostgresUsersStore.make[IO](transactor(), frozenClock).use { store =>
          for
            fstUserId <- store.createAccount(fstCreds).ccommit
            sndUserId <- store.createAccount(sndCreds).ccommit

            _ <- store.markForDeletion(fstUserId, permantDeletionDelay).ccommit

            fstAccount <- store.fetchAccount(fstUserId).ccommit.map(_.someOrFail)
            fstScheduledAccountDeletion <- store.fetchScheduledAccountDeletion(fstUserId).ccommit.map(_.someOrFail)
            sndAccount <- store.fetchAccount(sndUserId).ccommit.map(_.someOrFail)
            sndScheduledAccountDeletion <- store.fetchScheduledAccountDeletion(sndUserId).ccommit
          yield
            assert(fstAccount.isMarkedForDeletion)
            assertEquals(fstAccount.state, SoftDeleted(deletedAt.truncatedTo(MILLIS)))
            val permanentDeletionAt = deletedAt.plusSeconds(permantDeletionDelay.toSeconds).truncatedTo(MILLIS)
            assertEquals(
              fstScheduledAccountDeletion,
              AccountDeletionEvent.Scheduled(
                fstScheduledAccountDeletion.uuid, // ignore checking the job id generated by Postgres
                fstUserId,
                permanentDeletionAt
              )
            )
            assert(sndAccount.isActive)
            assert(sndScheduledAccountDeletion.isEmpty, clue = "Expected no scheduled deletion for the second account")
        }
      }
    }

  test("restores account"):
    forAllF { (credentials: UserCredentials) =>
      will(cleanStorage) {
        PostgresUsersStore.make[IO](transactor(), makeFrozenClock()).use { store =>
          for
            userId <- store.createAccount(credentials).ccommit
            _ <- store.markForDeletion(userId, 1.day).ccommit

            _ <- store.restoreAccount(userId).ccommit

            account <- store.fetchAccount(userId).ccommit.map(_.someOrFail)
            scheduledAccountDeletion <- store.fetchScheduledAccountDeletion(userId).ccommit
          yield
            assert(account.isActive)
            assert(scheduledAccountDeletion.isEmpty, clue = "Expected no scheduled deletion for the restored account")
        }
      }
    }

  test("deletes user account"):
    forAllF { (credentials: UserCredentials) =>
      will(cleanStorage) {
        PostgresUsersStore.make[IO](transactor(), makeFrozenClock()).use { store =>
          for
            userId <- store.createAccount(credentials).ccommit

            _ <- store.deleteAccount(userId).ccommit

            account <- store.fetchAccount(userId).ccommit
          yield assert(account.isEmpty)
        }
      }
    }

trait PostgresUsersStoreSpecContext extends DockerPostgresSuite:
  def cleanStorage: ConnectionIO[Unit] =
    sql"TRUNCATE TABLE auth.account_permanent_deletion_queue, auth.users".update.run.void

  extension (store: PostgresUsersStore[IO])
    def fetchPassword(uuid: UserId): ConnectionIO[HashedPassword] =
      sql"SELECT password_hash FROM auth.users WHERE uuid = ${uuid}".query[HashedPassword].unique

    def fetchCreatedAt(uuid: UserId): ConnectionIO[Instant] =
      sql"SELECT created_at FROM auth.users WHERE uuid = ${uuid}".query[Instant].unique

    def fetchUpdatedAt(uuid: UserId): ConnectionIO[Instant] =
      sql"SELECT updated_at FROM auth.users WHERE uuid = ${uuid}".query[Instant].unique

    def fetchScheduledAccountDeletion(uuid: UserId): ConnectionIO[Option[AccountDeletionEvent.Scheduled]] =
      sql"SELECT * FROM auth.account_permanent_deletion_queue WHERE user_id = ${uuid}"
        .query[AccountDeletionEvent.Scheduled]
        .option
