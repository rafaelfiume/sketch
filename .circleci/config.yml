# See: https://circleci.com/docs/sample-config/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-publish:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    machine:
      image: ubuntu-2204:2022.07.1
      docker_layer_caching: true

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Compile and run linter
          command: |
            sbt "scalafixAll --check; testAcceptance/scalafixAll --check"

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies--{{ checksum "build.sbt" }}

      - run:
          name: Run unit and integration tests
          command: cat /dev/null | sbt "test:test; it:test"

      - run:
          name: Set app version
          command: |
            VERSION=$(./tools/pipeline/version.sh)
            echo "VERSION=$VERSION" >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Build and tag docker image
          command: |
            ./tools/pipeline/docker/build-and-tag-image.sh

      - run:
          name: Publish docker image
          command: |
            ./tools/pipeline/docker/publish-image.sh

      - run:
          name: Run acceptance tests
          command: |
            # This is the where the scripts will log to
            mkdir -p tools/stack/logs
            # This is where CircleCI will store the artifacts
            mkdir -p pipeline/stack/logs
            # Set PRIVATE_KEY and PUBLIC_KEY environment variables
            echo 'export PRIVATE_KEY="$(echo $PRIVATE_KEY_BASE64_ONE_LINER | base64 -d)"' >> $BASH_ENV
            echo 'export PUBLIC_KEY="$(echo $PUBLIC_KEY_BASE64_ONE_LINER | base64 -d)"' >> $BASH_ENV
            # Run the stack and tests
            ./tools/stack/start-local.sh --debug --sketch-tag $VERSION 2> start-local.log || true
            # Create artefacts
            mv start-local.log pipeline/stack/logs/start-local.log
            mv tools/stack/logs/visual.log pipeline/stack/logs/visual.log
            mv tools/stack/logs/sketch.log pipeline/stack/logs/sketch.log
            mv tools/stack/logs/sketch-database.log pipeline/stack/logs/sketch-database.log
            mv tools/stack/logs/rustic.log pipeline/stack/logs/rustic.log
            mv tools/stack/logs/rustic-database.log pipeline/stack/logs/rustic-database.log
            ./tools/tests/acc-tests.sh

      - store_artifacts:
          path: pipeline/stack/logs

workflows:
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/configuration-reference/#workflows
  build:
    jobs:
      - build-and-publish
